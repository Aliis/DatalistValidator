{"remainingRequest":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\src\\views\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\src\\views\\Home.vue","mtime":1554404277541},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import axios from 'axios'\n    export default {\n        data() {\n            return {\n                feedItems: [],\n                feedLodingError: '',\n                feedCounter: 10,\n                page: 1,\n                url: 'http://fe-test.guardtime.com/documents',\n                docValid: true,\n                alert: true\n            }\n        },\n        methods: {\n            getFeed() {\n                this.feedLodingError = '';\n                axios.get(this.url + '?perPage=50&page=' + this.page)\n                .then((res) => {\n                    this.feedItems = this.feedItems.concat(res.data.data);\n                })\n                .catch(() => {\n                    this.feedLodingError = 'Service unavailable.'\n                })\n\n                console.log(setTimeout(this.checkFeedItems, 1000))\n            },\n            checkFeedItems() {\n                return this.feedItems.length < 1;\n            },\n            async validateSingleDoc(id) {\n                let modes = ['validateChecksum', 'validateSchema', 'validateSignature'];\n                let gotFalseFromResponse = false;\n                let feedObjectById = what => this.feedItems.find(element => element.id === what);\n                let docValid = true\n                let error = false\n\n                if(feedObjectById(id)) {\n                    this.$set(feedObjectById(id), 'checksum',  '');\n                    this.$set(feedObjectById(id), 'schema',  '');\n                    this.$set(feedObjectById(id), 'signature',  '');\n                    this.$set(feedObjectById(id), 'validationError',  false);\n\n                    for(let i = 0; i < modes.length; i++) {\n                        await axios.post(this.url + '/'+ id + '/' + modes[i])\n                            .then((res) => {\n                                if (!res.data.valid) {\n                                    gotFalseFromResponse = true\n                                }\n                                if (i === 0) {\n                                    this.$set(feedObjectById(id), 'checksum',  res.data.valid);\n                                    console.log('here 1', modes[i], res.data.valid)\n                                }\n                                else if (i === 1) {\n                                    this.$set(feedObjectById(id), 'schema',  res.data.valid);\n                                    console.log('here 2', modes[i], res.data.valid)\n                                }\n                                else {\n                                    this.$set(feedObjectById(id), 'signature',  res.data.valid);\n                                    console.log('here 3', modes[i], res.data.valid)\n                                }\n                            })\n                            .catch(() => {\n                                error = true\n                                this.$set(feedObjectById(id), 'validationError',  true);\n                            })\n                        if (gotFalseFromResponse === true) {\n                            docValid = false\n                            break;\n                        }\n                        gotFalseFromResponse = false\n                    }\n                    if(docValid && !error) {\n                        this.$set(feedObjectById(id), 'valid',  'valid');\n                    }\n                    else if (error) {\n                        this.$set(feedObjectById(id), 'valid',  '');\n                        this.$set(feedObjectById(id), 'checksum',  '');\n                        this.$set(feedObjectById(id), 'schema',  '');\n                        this.$set(feedObjectById(id), 'signature',  '');\n                    }\n                    else {\n                        this.$set(feedObjectById(id), 'valid',  'notvalid');\n                    }\n                }\n                docValid = true\n                error = false\n            },\n            infiniteScroll() {\n                window.onscroll = () => {\n                    let bottomOfWindow = document.documentElement.scrollTop + window.innerHeight === document.documentElement.offsetHeight;\n\n                    if (bottomOfWindow) {\n                        this.page+=1;\n                        this.getFeed()\n                        this.feedCounter+=10;\n                    }\n                };\n\n            }\n    },\n    created() {\n        this.getFeed();\n    },\n    mounted() {\n        this.infiniteScroll();\n    }\n};\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <v-container grid-list-lg>\n            <v-layout row wrap>\n                <v-flex xs12 v-if=\"feedLodingError\">\n                    <v-card color=\"blue-grey darken-2\">\n                        <v-card-text  class=\"text\">\n                            <p>{{ feedLodingError }}</p>\n                        </v-card-text>\n                        <v-card-actions class=\"buttons\">\n                            <div class=\"button-wrapper\"><v-btn @click=\"getFeed\" flat color=\"orange\">Reload\n                            </v-btn></div>\n                        </v-card-actions>\n                    </v-card>\n                </v-flex>\n                <v-flex xs12 v-else  v-for=\"item in feedItems\">\n                    <v-card color=\"blue-grey darken-2\">\n                        <v-card-title class=\"text\">\n                            <v-flex xs11>\n                                <div class=\"headline\">{{ item.filename }}</div>\n                            </v-flex>\n                            <v-flex xs1 style=\"text-align: right;\">\n                                <div v-if=\"item.valid === 'valid'\"><v-icon>far fa-check-circle</v-icon></div>\n                                <div v-if=\"item.valid === 'notvalid'\"><v-icon>far fa-times-circle</v-icon></div>\n                            </v-flex>\n                        </v-card-title>\n                        <v-card-text  class=\"text\">\n                                <div>{{ item.hash }}</div>\n                                <div>{{ item.id}}</div><br>\n                                <div>Checksum {{item.checksum}}</div>\n                                <div>Schema {{item.schema}}</div>\n                                <div>Signature {{item.signature}}</div>\n\n                            <v-alert\n                                     :value=\"true\"\n                                     v-model=\"item.validationError\"\n                                     dismissible\n                                     type=\"error\"\n                            >Validation failed, please revalidate\n                            </v-alert>\n                        </v-card-text>\n                        <v-card-actions class=\"buttons\">\n                            <div class=\"button-wrapper\"><v-btn @click=\"validateSingleDoc(item.id)\"\n                                    flat color=\"orange\">Validate</v-btn></div>\n                        </v-card-actions>\n                    </v-card>\n                </v-flex>\n            </v-layout>\n        </v-container>\n    </div>\n</template>\n\n<script>\n    import axios from 'axios'\n    export default {\n        data() {\n            return {\n                feedItems: [],\n                feedLodingError: '',\n                feedCounter: 10,\n                page: 1,\n                url: 'http://fe-test.guardtime.com/documents',\n                docValid: true,\n                alert: true\n            }\n        },\n        methods: {\n            getFeed() {\n                this.feedLodingError = '';\n                axios.get(this.url + '?perPage=50&page=' + this.page)\n                .then((res) => {\n                    this.feedItems = this.feedItems.concat(res.data.data);\n                })\n                .catch(() => {\n                    this.feedLodingError = 'Service unavailable.'\n                })\n\n                console.log(setTimeout(this.checkFeedItems, 1000))\n            },\n            checkFeedItems() {\n                return this.feedItems.length < 1;\n            },\n            async validateSingleDoc(id) {\n                let modes = ['validateChecksum', 'validateSchema', 'validateSignature'];\n                let gotFalseFromResponse = false;\n                let feedObjectById = what => this.feedItems.find(element => element.id === what);\n                let docValid = true\n                let error = false\n\n                if(feedObjectById(id)) {\n                    this.$set(feedObjectById(id), 'checksum',  '');\n                    this.$set(feedObjectById(id), 'schema',  '');\n                    this.$set(feedObjectById(id), 'signature',  '');\n                    this.$set(feedObjectById(id), 'validationError',  false);\n\n                    for(let i = 0; i < modes.length; i++) {\n                        await axios.post(this.url + '/'+ id + '/' + modes[i])\n                            .then((res) => {\n                                if (!res.data.valid) {\n                                    gotFalseFromResponse = true\n                                }\n                                if (i === 0) {\n                                    this.$set(feedObjectById(id), 'checksum',  res.data.valid);\n                                    console.log('here 1', modes[i], res.data.valid)\n                                }\n                                else if (i === 1) {\n                                    this.$set(feedObjectById(id), 'schema',  res.data.valid);\n                                    console.log('here 2', modes[i], res.data.valid)\n                                }\n                                else {\n                                    this.$set(feedObjectById(id), 'signature',  res.data.valid);\n                                    console.log('here 3', modes[i], res.data.valid)\n                                }\n                            })\n                            .catch(() => {\n                                error = true\n                                this.$set(feedObjectById(id), 'validationError',  true);\n                            })\n                        if (gotFalseFromResponse === true) {\n                            docValid = false\n                            break;\n                        }\n                        gotFalseFromResponse = false\n                    }\n                    if(docValid && !error) {\n                        this.$set(feedObjectById(id), 'valid',  'valid');\n                    }\n                    else if (error) {\n                        this.$set(feedObjectById(id), 'valid',  '');\n                        this.$set(feedObjectById(id), 'checksum',  '');\n                        this.$set(feedObjectById(id), 'schema',  '');\n                        this.$set(feedObjectById(id), 'signature',  '');\n                    }\n                    else {\n                        this.$set(feedObjectById(id), 'valid',  'notvalid');\n                    }\n                }\n                docValid = true\n                error = false\n            },\n            infiniteScroll() {\n                window.onscroll = () => {\n                    let bottomOfWindow = document.documentElement.scrollTop + window.innerHeight === document.documentElement.offsetHeight;\n\n                    if (bottomOfWindow) {\n                        this.page+=1;\n                        this.getFeed()\n                        this.feedCounter+=10;\n                    }\n                };\n\n            }\n    },\n    created() {\n        this.getFeed();\n    },\n    mounted() {\n        this.infiniteScroll();\n    }\n};\n</script>\n<style>\n    .text {\n        color: #ddd;\n    }\n    .button-wrapper {\n        text-align: right;\n        width: 100%;\n    }\n    .buttons {\n        background: #455A70;\n    }\n    .v-card__text {\n        flex-wrap: wrap;\n    }\n    .flex .fa-check-circle {\n        color: limegreen!important;\n    }\n    .flex .fa-times-circle {\n        color: orangered !important;\n    }\n</style>\n"]}]}