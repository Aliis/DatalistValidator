{"remainingRequest":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\src\\components\\Card.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\src\\components\\Card.vue","mtime":1554914063832},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aliiski\\\\Desktop\\\\work\\\\DatalistValidator\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  data: function data() {\n    return {\n      url: 'http://fe-test.guardtime.com/documents'\n    };\n  },\n  name: \"card\",\n  methods: {\n    validateSingleDoc: function () {\n      var _validateSingleDoc = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(id) {\n        var _this = this;\n\n        var modes, docObjectById, docByID, _loop, i, _ret;\n\n        return regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modes = ['validateChecksum', 'validateSchema', 'validateSignature'], docObjectById = function docObjectById(what) {\n                  return _this.$store.state.dataItems.find(function (element) {\n                    return element.id === what;\n                  });\n                }, docByID = docObjectById(id);\n\n                if (!docByID) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                this.initValues(docByID);\n                this.resetValues(docByID);\n                _loop =\n                /*#__PURE__*/\n                regeneratorRuntime.mark(function _loop(i) {\n                  return regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _this.$set(docByID, 'valid', 'validationInProgress');\n\n                          _context.next = 3;\n                          return axios.post(_this.url + '/' + id + '/' + modes[i]).then(function (res) {\n                            if (!res.data.valid) {\n                              _this.$set(docByID, 'gotFalseFromResponse', true);\n                            }\n\n                            if (modes[i] === 'validateChecksum') {\n                              _this.$set(docByID, 'checksum', res.data.valid);\n                            } else if (modes[i] === 'validateSchema') {\n                              _this.$set(docByID, 'schema', res.data.valid);\n                            } else {\n                              _this.$set(docByID, 'signature', res.data.valid);\n                            }\n                          }).catch(function (error) {\n                            _this.$set(docByID, 'gotErrorFromResponse', true); // console.log(error.response.data.error.code)\n\n                          });\n\n                        case 3:\n                          if (!docByID.gotFalseFromResponse) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _this.$set(docByID, 'docValid', false);\n\n                          return _context.abrupt(\"return\", \"break\");\n\n                        case 6:\n                          if (!docByID.gotErrorFromResponse) {\n                            _context.next = 8;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", \"break\");\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop, this);\n                });\n                i = 0;\n\n              case 6:\n                if (!(i < modes.length)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(i), \"t0\", 8);\n\n              case 8:\n                _ret = _context2.t0;\n\n                if (!(_ret === \"break\")) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 14);\n\n              case 11:\n                i++;\n                _context2.next = 6;\n                break;\n\n              case 14:\n                if (docByID.gotErrorFromResponse) {\n                  this.resetValues(docByID);\n                } else {\n                  if (docByID.docValid) {\n                    this.$set(docByID, 'valid', 'valid');\n                  } else {\n                    this.$set(docByID, 'valid', 'notValid');\n                  }\n                }\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function validateSingleDoc(_x) {\n        return _validateSingleDoc.apply(this, arguments);\n      }\n\n      return validateSingleDoc;\n    }(),\n    initValues: function initValues(obj) {\n      this.$set(obj, 'gotFalseFromResponse', false);\n      this.$set(obj, 'gotErrorFromResponse', false);\n      this.$set(obj, 'docValid', true);\n    },\n    resetValues: function resetValues(obj) {\n      this.$set(obj, 'checksum', '');\n      this.$set(obj, 'schema', '');\n      this.$set(obj, 'signature', '');\n      this.$set(obj, 'valid', '');\n    }\n  },\n  computed: {\n    dataItems: function dataItems() {\n      return this.$store.state.dataItems;\n    }\n  }\n};",{"version":3,"sources":["Card.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <v-flex xs12 v-for=\"(item, index) in dataItems\" v-bind:key=\"index\">\r\n            <v-card color=\"blue-grey darken-2\">\r\n                <v-card-title class=\"text\">\r\n                    <v-flex xs11>\r\n                        <div class=\"headline\">{{ item.filename }}</div>\r\n                    </v-flex>\r\n                    <v-flex xs1 style=\"text-align: right;\">\r\n                        <div v-if=\"item.valid === 'valid'\"><v-icon>far fa-check-circle</v-icon></div>\r\n                        <div v-if=\"item.valid === 'notValid'\"><v-icon>far fa-times-circle</v-icon></div>\r\n                        <div v-if=\"item.valid === 'validationInProgress'\"><v-icon>fas fa-circle-notch\r\n                        fa-spin</v-icon></div>\r\n                    </v-flex>\r\n                </v-card-title>\r\n                <v-card-text  class=\"text\">\r\n                    <div>ID {{ item.id}}</div><br>\r\n                    <div>Checksum {{item.checksum}}</div>\r\n                    <div>Schema {{item.schema}}</div>\r\n                    <div>Signature {{item.signature}}</div>\r\n\r\n                    <v-alert :value=\"true\"\r\n                        v-model=\"item.gotErrorFromResponse\"\r\n                        dismissible\r\n                        type=\"error\"\r\n                        >Validation failed, please revalidate\r\n                    </v-alert>\r\n                </v-card-text>\r\n                <v-card-actions class=\"buttons\">\r\n                    <div class=\"button-wrapper\"><v-btn @click=\"validateSingleDoc(item.id)\"\r\n                        flat color=\"orange\">Validate</v-btn></div>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-flex>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n    export default {\r\n        data() {\r\n            return {\r\n                url: 'http://fe-test.guardtime.com/documents',\r\n            }\r\n        },\r\n        name: \"card\",\r\n        methods: {\r\n            async validateSingleDoc(id) {\r\n                let modes = ['validateChecksum', 'validateSchema', 'validateSignature'],\r\n                    docObjectById = what => this.$store.state.dataItems.find(element => element.id === what),\r\n                    docByID = docObjectById(id)\r\n\r\n                if(docByID) {\r\n                    this.initValues(docByID)\r\n                    this.resetValues(docByID)\r\n\r\n                    for(let i = 0; i < modes.length; i++) {\r\n                        this.$set(docByID, 'valid',  'validationInProgress');\r\n                        await axios.post(this.url + '/'+ id + '/' + modes[i])\r\n                            .then((res) => {\r\n                                if (!res.data.valid) {\r\n                                    this.$set(docByID, 'gotFalseFromResponse',  true);\r\n                                }\r\n                                if (modes[i] === 'validateChecksum') {\r\n                                    this.$set(docByID, 'checksum',  res.data.valid);\r\n                                }\r\n                                else if (modes[i] === 'validateSchema') {\r\n                                    this.$set(docByID, 'schema',  res.data.valid);\r\n                                }\r\n                                else {\r\n                                    this.$set(docByID, 'signature',  res.data.valid);\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                this.$set(docByID, 'gotErrorFromResponse',  true);\r\n                                // console.log(error.response.data.error.code)\r\n                            })\r\n                        if (docByID.gotFalseFromResponse) {\r\n                            this.$set(docByID, 'docValid',  false);\r\n                            break;\r\n                        }\r\n                        if(docByID.gotErrorFromResponse) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (docByID.gotErrorFromResponse) {\r\n                        this.resetValues(docByID)\r\n                    }\r\n                    else {\r\n                        if (docByID.docValid) {\r\n                            this.$set(docByID, 'valid',  'valid');\r\n                        }\r\n                        else {\r\n                            this.$set(docByID, 'valid',  'notValid');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            initValues(obj) {\r\n                this.$set(obj, 'gotFalseFromResponse',  false);\r\n                this.$set(obj, 'gotErrorFromResponse',  false);\r\n                this.$set(obj, 'docValid',  true);\r\n            },\r\n            resetValues(obj) {\r\n                this.$set(obj, 'checksum',  '');\r\n                this.$set(obj, 'schema',  '');\r\n                this.$set(obj, 'signature',  '');\r\n                this.$set(obj, 'valid',  '');\r\n            }\r\n        },\r\n        computed: {\r\n            dataItems() {\r\n                return this.$store.state.dataItems;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"sourceRoot":"src/components"}]}