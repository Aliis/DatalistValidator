{"remainingRequest":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\src\\components\\Card.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\src\\components\\Card.vue","mtime":1554914063832},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nexport default {\n    data() {\n        return {\n            url: 'http://fe-test.guardtime.com/documents',\n        }\n    },\n    name: \"card\",\n    methods: {\n        async validateSingleDoc(id) {\n            let modes = ['validateChecksum', 'validateSchema', 'validateSignature'],\n                docObjectById = what => this.$store.state.dataItems.find(element => element.id === what),\n                docByID = docObjectById(id)\n\n            if(docByID) {\n                this.initValues(docByID)\n                this.resetValues(docByID)\n\n                for(let i = 0; i < modes.length; i++) {\n                    this.$set(docByID, 'valid',  'validationInProgress');\n                    await axios.post(this.url + '/'+ id + '/' + modes[i])\n                        .then((res) => {\n                            if (!res.data.valid) {\n                                this.$set(docByID, 'gotFalseFromResponse',  true);\n                            }\n                            if (modes[i] === 'validateChecksum') {\n                                this.$set(docByID, 'checksum',  res.data.valid);\n                            }\n                            else if (modes[i] === 'validateSchema') {\n                                this.$set(docByID, 'schema',  res.data.valid);\n                            }\n                            else {\n                                this.$set(docByID, 'signature',  res.data.valid);\n                            }\n                        })\n                        .catch((error) => {\n                            this.$set(docByID, 'gotErrorFromResponse',  true);\n                            // console.log(error.response.data.error.code)\n                        })\n                    if (docByID.gotFalseFromResponse) {\n                        this.$set(docByID, 'docValid',  false);\n                        break;\n                    }\n                    if(docByID.gotErrorFromResponse) {\n                        break;\n                    }\n                }\n                if (docByID.gotErrorFromResponse) {\n                    this.resetValues(docByID)\n                }\n                else {\n                    if (docByID.docValid) {\n                        this.$set(docByID, 'valid',  'valid');\n                    }\n                    else {\n                        this.$set(docByID, 'valid',  'notValid');\n                    }\n                }\n            }\n        },\n        initValues(obj) {\n            this.$set(obj, 'gotFalseFromResponse',  false);\n            this.$set(obj, 'gotErrorFromResponse',  false);\n            this.$set(obj, 'docValid',  true);\n        },\n        resetValues(obj) {\n            this.$set(obj, 'checksum',  '');\n            this.$set(obj, 'schema',  '');\n            this.$set(obj, 'signature',  '');\n            this.$set(obj, 'valid',  '');\n        }\n    },\n    computed: {\n        dataItems() {\n            return this.$store.state.dataItems;\n        }\n    }\n}\n",{"version":3,"sources":["Card.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Card.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <v-flex xs12 v-for=\"(item, index) in dataItems\" v-bind:key=\"index\">\r\n            <v-card color=\"blue-grey darken-2\">\r\n                <v-card-title class=\"text\">\r\n                    <v-flex xs11>\r\n                        <div class=\"headline\">{{ item.filename }}</div>\r\n                    </v-flex>\r\n                    <v-flex xs1 style=\"text-align: right;\">\r\n                        <div v-if=\"item.valid === 'valid'\"><v-icon>far fa-check-circle</v-icon></div>\r\n                        <div v-if=\"item.valid === 'notValid'\"><v-icon>far fa-times-circle</v-icon></div>\r\n                        <div v-if=\"item.valid === 'validationInProgress'\"><v-icon>fas fa-circle-notch\r\n                        fa-spin</v-icon></div>\r\n                    </v-flex>\r\n                </v-card-title>\r\n                <v-card-text  class=\"text\">\r\n                    <div>ID {{ item.id}}</div><br>\r\n                    <div>Checksum {{item.checksum}}</div>\r\n                    <div>Schema {{item.schema}}</div>\r\n                    <div>Signature {{item.signature}}</div>\r\n\r\n                    <v-alert :value=\"true\"\r\n                        v-model=\"item.gotErrorFromResponse\"\r\n                        dismissible\r\n                        type=\"error\"\r\n                        >Validation failed, please revalidate\r\n                    </v-alert>\r\n                </v-card-text>\r\n                <v-card-actions class=\"buttons\">\r\n                    <div class=\"button-wrapper\"><v-btn @click=\"validateSingleDoc(item.id)\"\r\n                        flat color=\"orange\">Validate</v-btn></div>\r\n                </v-card-actions>\r\n            </v-card>\r\n        </v-flex>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import axios from 'axios'\r\n    export default {\r\n        data() {\r\n            return {\r\n                url: 'http://fe-test.guardtime.com/documents',\r\n            }\r\n        },\r\n        name: \"card\",\r\n        methods: {\r\n            async validateSingleDoc(id) {\r\n                let modes = ['validateChecksum', 'validateSchema', 'validateSignature'],\r\n                    docObjectById = what => this.$store.state.dataItems.find(element => element.id === what),\r\n                    docByID = docObjectById(id)\r\n\r\n                if(docByID) {\r\n                    this.initValues(docByID)\r\n                    this.resetValues(docByID)\r\n\r\n                    for(let i = 0; i < modes.length; i++) {\r\n                        this.$set(docByID, 'valid',  'validationInProgress');\r\n                        await axios.post(this.url + '/'+ id + '/' + modes[i])\r\n                            .then((res) => {\r\n                                if (!res.data.valid) {\r\n                                    this.$set(docByID, 'gotFalseFromResponse',  true);\r\n                                }\r\n                                if (modes[i] === 'validateChecksum') {\r\n                                    this.$set(docByID, 'checksum',  res.data.valid);\r\n                                }\r\n                                else if (modes[i] === 'validateSchema') {\r\n                                    this.$set(docByID, 'schema',  res.data.valid);\r\n                                }\r\n                                else {\r\n                                    this.$set(docByID, 'signature',  res.data.valid);\r\n                                }\r\n                            })\r\n                            .catch((error) => {\r\n                                this.$set(docByID, 'gotErrorFromResponse',  true);\r\n                                // console.log(error.response.data.error.code)\r\n                            })\r\n                        if (docByID.gotFalseFromResponse) {\r\n                            this.$set(docByID, 'docValid',  false);\r\n                            break;\r\n                        }\r\n                        if(docByID.gotErrorFromResponse) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (docByID.gotErrorFromResponse) {\r\n                        this.resetValues(docByID)\r\n                    }\r\n                    else {\r\n                        if (docByID.docValid) {\r\n                            this.$set(docByID, 'valid',  'valid');\r\n                        }\r\n                        else {\r\n                            this.$set(docByID, 'valid',  'notValid');\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            initValues(obj) {\r\n                this.$set(obj, 'gotFalseFromResponse',  false);\r\n                this.$set(obj, 'gotErrorFromResponse',  false);\r\n                this.$set(obj, 'docValid',  true);\r\n            },\r\n            resetValues(obj) {\r\n                this.$set(obj, 'checksum',  '');\r\n                this.$set(obj, 'schema',  '');\r\n                this.$set(obj, 'signature',  '');\r\n                this.$set(obj, 'valid',  '');\r\n            }\r\n        },\r\n        computed: {\r\n            dataItems() {\r\n                return this.$store.state.dataItems;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}