{"remainingRequest":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\src\\views\\Home.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\src\\views\\Home.vue","mtime":1554757328588},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\DatalistValidator\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\aliiski\\\\Desktop\\\\work\\\\DatalistValidator\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  data: function data() {\n    return {\n      dataItems: [],\n      dataLoadingError: '',\n      dataCounter: 5,\n      perPage: 50,\n      page: 1,\n      url: 'http://fe-test.guardtime.com/documents',\n      alert: true,\n      showDataLoader: false,\n      startIndex: 0\n    };\n  },\n  methods: {\n    showData: function showData(state) {\n      var _this = this;\n\n      this.showDataLoader = true;\n      this.dataLoadingError = ''; // Reload button appears, if data not loaded after 3 sec.\n      // Speeds up testing, should be used in dev mode only.\n\n      setTimeout(this.error504Handling, 3000);\n      axios.get(this.url + '?perPage=' + this.perPage + '&page=' + this.page).then(function (res) {\n        _this.showDataLoader = false;\n        _this.dataItems = _this.dataItems.concat(res.data.data);\n      }).catch(function (error) {\n        if (state === true) {\n          _this.showDataLoader = false;\n\n          _this.showData(false);\n\n          console.log(error.response.data.error.code);\n        }\n      });\n    },\n    validateSingleDoc: function () {\n      var _validateSingleDoc = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(id) {\n        var _this2 = this;\n\n        var modes, docObjectById, docByID, _loop, i, _ret;\n\n        return regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modes = ['validateChecksum', 'validateSchema', 'validateSignature'], docObjectById = function docObjectById(what) {\n                  return _this2.dataItems.find(function (element) {\n                    return element.id === what;\n                  });\n                }, docByID = docObjectById(id);\n\n                if (!docByID) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                this.initValues(docByID);\n                this.resetValues(docByID);\n                _loop =\n                /*#__PURE__*/\n                regeneratorRuntime.mark(function _loop(i) {\n                  return regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _this2.$set(docByID, 'valid', 'validationInProgress');\n\n                          _context.next = 3;\n                          return axios.post(_this2.url + '/' + id + '/' + modes[i]).then(function (res) {\n                            if (!res.data.valid) {\n                              _this2.$set(docByID, 'gotFalseFromResponse', true);\n                            }\n\n                            if (modes[i] === 'validateChecksum') {\n                              _this2.$set(docByID, 'checksum', res.data.valid);\n                            } else if (modes[i] === 'validateSchema') {\n                              _this2.$set(docByID, 'schema', res.data.valid);\n                            } else {\n                              _this2.$set(docByID, 'signature', res.data.valid);\n                            }\n                          }).catch(function (error) {\n                            _this2.$set(docByID, 'gotErrorFromResponse', true);\n\n                            console.log(error.response.data.error.code);\n                          });\n\n                        case 3:\n                          if (!docByID.gotFalseFromResponse) {\n                            _context.next = 6;\n                            break;\n                          }\n\n                          _this2.$set(docByID, 'docValid', false);\n\n                          return _context.abrupt(\"return\", \"break\");\n\n                        case 6:\n                          if (!docByID.gotErrorFromResponse) {\n                            _context.next = 8;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", \"break\");\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop, this);\n                });\n                i = 0;\n\n              case 6:\n                if (!(i < modes.length)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(i), \"t0\", 8);\n\n              case 8:\n                _ret = _context2.t0;\n\n                if (!(_ret === \"break\")) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.abrupt(\"break\", 14);\n\n              case 11:\n                i++;\n                _context2.next = 6;\n                break;\n\n              case 14:\n                if (docByID.gotErrorFromResponse) {\n                  this.resetValues(docByID);\n                } else {\n                  if (docByID.docValid) {\n                    this.$set(docByID, 'valid', 'valid');\n                  } else {\n                    this.$set(docByID, 'valid', 'notValid');\n                  }\n                }\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function validateSingleDoc(_x) {\n        return _validateSingleDoc.apply(this, arguments);\n      }\n\n      return validateSingleDoc;\n    }(),\n    infiniteScroll: function infiniteScroll() {\n      var _this3 = this;\n\n      window.onscroll = function () {\n        var bottomOfWindow = window.innerHeight + Math.ceil(window.pageYOffset) >= document.body.offsetHeight;\n\n        if (bottomOfWindow) {\n          _this3.page += 1;\n\n          _this3.showData(true);\n\n          _this3.dataCounter += _this3.perPage;\n        }\n      };\n    },\n    error504Handling: function error504Handling() {\n      this.showDataLoader = false;\n\n      if (this.dataItems.length < 1) {\n        this.dataLoadingError = 'Service unavailable, please reload';\n      }\n    },\n    validateAllDocs: function validateAllDocs() {\n      var that = this,\n          perIteration = 5;\n      this.dataItems.slice(that.startIndex, that.startIndex + perIteration).forEach(function (item) {\n        that.validateSingleDoc(item.id);\n      });\n      that.startIndex += perIteration;\n\n      if (this.dataItems.length > that.startIndex) {\n        setTimeout(this.validateAllDocs, 5500);\n      } else {\n        that.startIndex = 0;\n      }\n    },\n    initValues: function initValues(obj) {\n      this.$set(obj, 'gotFalseFromResponse', false);\n      this.$set(obj, 'gotErrorFromResponse', false);\n      this.$set(obj, 'docValid', true);\n    },\n    resetValues: function resetValues(obj) {\n      this.$set(obj, 'checksum', '');\n      this.$set(obj, 'schema', '');\n      this.$set(obj, 'signature', '');\n      this.$set(obj, 'valid', '');\n    }\n  },\n  created: function created() {\n    this.showData(true);\n  },\n  mounted: function mounted() {\n    this.infiniteScroll();\n  }\n};",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA,OAAA,KAAA,MAAA,OAAA;AACA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,gBAAA,EAAA,EAFA;AAGA,MAAA,WAAA,EAAA,CAHA;AAIA,MAAA,OAAA,EAAA,EAJA;AAKA,MAAA,IAAA,EAAA,CALA;AAMA,MAAA,GAAA,EAAA,wCANA;AAOA,MAAA,KAAA,EAAA,IAPA;AAQA,MAAA,cAAA,EAAA,KARA;AASA,MAAA,UAAA,EAAA;AATA,KAAA;AAWA,GAbA;AAcA,EAAA,OAAA,EAAA;AACA,IAAA,QADA,oBACA,KADA,EACA;AAAA;;AACA,WAAA,cAAA,GAAA,IAAA;AACA,WAAA,gBAAA,GAAA,EAAA,CAFA,CAGA;AACA;;AACA,MAAA,UAAA,CAAA,KAAA,gBAAA,EAAA,IAAA,CAAA;AAEA,MAAA,KAAA,CAAA,GAAA,CAAA,KAAA,GAAA,GAAA,WAAA,GAAA,KAAA,OAAA,GAAA,QAAA,GAAA,KAAA,IAAA,EACA,IADA,CACA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,cAAA,GAAA,KAAA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA,OAJA,EAKA,KALA,CAKA,UAAA,KAAA,EAAA;AACA,YAAA,KAAA,KAAA,IAAA,EAAA;AACA,UAAA,KAAA,CAAA,cAAA,GAAA,KAAA;;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,KAAA;;AACA,UAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA;AACA;AACA,OAXA;AAYA,KApBA;AAqBA,IAAA,iBArBA;AAAA;AAAA;AAAA,+CAqBA,EArBA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAsBA,gBAAA,KAtBA,GAsBA,CAAA,kBAAA,EAAA,gBAAA,EAAA,mBAAA,CAtBA,EAuBA,aAvBA,GAuBA,SAAA,aAAA,CAAA,IAAA;AAAA,yBAAA,MAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,OAAA;AAAA,2BAAA,OAAA,CAAA,EAAA,KAAA,IAAA;AAAA,mBAAA,CAAA;AAAA,iBAvBA,EAwBA,OAxBA,GAwBA,aAAA,CAAA,EAAA,CAxBA;;AAAA,qBA0BA,OA1BA;AAAA;AAAA;AAAA;;AA2BA,qBAAA,UAAA,CAAA,OAAA;AACA,qBAAA,WAAA,CAAA,OAAA;AA5BA;AAAA;AAAA,uDA8BA,CA9BA;AAAA;AAAA;AAAA;AAAA;AA+BA,0BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,OAAA,EAAA,sBAAA;;AA/BA;AAAA,iCAgCA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,EACA,IADA,CACA,UAAA,GAAA,EAAA;AACA,gCAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,EAAA;AACA,8BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,sBAAA,EAAA,IAAA;AACA;;AACA,gCAAA,KAAA,CAAA,CAAA,CAAA,KAAA,kBAAA,EAAA;AACA,8BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,UAAA,EAAA,GAAA,CAAA,IAAA,CAAA,KAAA;AACA,6BAFA,MAGA,IAAA,KAAA,CAAA,CAAA,CAAA,KAAA,gBAAA,EAAA;AACA,8BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,QAAA,EAAA,GAAA,CAAA,IAAA,CAAA,KAAA;AACA,6BAFA,MAGA;AACA,8BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,WAAA,EAAA,GAAA,CAAA,IAAA,CAAA,KAAA;AACA;AACA,2BAdA,EAeA,KAfA,CAeA,UAAA,KAAA,EAAA;AACA,4BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,sBAAA,EAAA,IAAA;;AACA,4BAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA;AACA,2BAlBA,CAhCA;;AAAA;AAAA,+BAmDA,OAAA,CAAA,oBAnDA;AAAA;AAAA;AAAA;;AAoDA,0BAAA,MAAA,CAAA,IAAA,CAAA,OAAA,EAAA,UAAA,EAAA,KAAA;;AApDA;;AAAA;AAAA,+BAuDA,OAAA,CAAA,oBAvDA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA,gBAAA,CA9BA,GA8BA,CA9BA;;AAAA;AAAA,sBA8BA,CAAA,GAAA,KAAA,CAAA,MA9BA;AAAA;AAAA;AAAA;;AAAA,qDA8BA,CA9BA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AA8BA,gBAAA,CAAA,EA9BA;AAAA;AAAA;;AAAA;AA2DA,oBAAA,OAAA,CAAA,oBAAA,EAAA;AACA,uBAAA,WAAA,CAAA,OAAA;AACA,iBAFA,MAGA;AACA,sBAAA,OAAA,CAAA,QAAA,EAAA;AACA,yBAAA,IAAA,CAAA,OAAA,EAAA,OAAA,EAAA,OAAA;AACA,mBAFA,MAGA;AACA,yBAAA,IAAA,CAAA,OAAA,EAAA,OAAA,EAAA,UAAA;AACA;AACA;;AArEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwEA,IAAA,cAxEA,4BAwEA;AAAA;;AACA,MAAA,MAAA,CAAA,QAAA,GAAA,YAAA;AACA,YAAA,cAAA,GAAA,MAAA,CAAA,WAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,CAAA,WAAA,CAAA,IACA,QAAA,CAAA,IAAA,CAAA,YADA;;AAGA,YAAA,cAAA,EAAA;AACA,UAAA,MAAA,CAAA,IAAA,IAAA,CAAA;;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,IAAA;;AACA,UAAA,MAAA,CAAA,WAAA,IAAA,MAAA,CAAA,OAAA;AACA;AACA,OATA;AAUA,KAnFA;AAoFA,IAAA,gBApFA,8BAoFA;AACA,WAAA,cAAA,GAAA,KAAA;;AACA,UAAA,KAAA,SAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,aAAA,gBAAA,GAAA,oCAAA;AACA;AACA,KAzFA;AA0FA,IAAA,eA1FA,6BA0FA;AACA,UAAA,IAAA,GAAA,IAAA;AAAA,UACA,YAAA,GAAA,CADA;AAGA,WAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,EAAA,IAAA,CAAA,UAAA,GAAA,YAAA,EACA,OADA,CACA,UAAA,IAAA,EAAA;AACA,QAAA,IAAA,CAAA,iBAAA,CAAA,IAAA,CAAA,EAAA;AACA,OAHA;AAKA,MAAA,IAAA,CAAA,UAAA,IAAA,YAAA;;AACA,UAAA,KAAA,SAAA,CAAA,MAAA,GAAA,IAAA,CAAA,UAAA,EAAA;AACA,QAAA,UAAA,CAAA,KAAA,eAAA,EAAA,IAAA,CAAA;AACA,OAFA,MAEA;AACA,QAAA,IAAA,CAAA,UAAA,GAAA,CAAA;AACA;AACA,KAzGA;AA0GA,IAAA,UA1GA,sBA0GA,GA1GA,EA0GA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,sBAAA,EAAA,KAAA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,sBAAA,EAAA,KAAA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,UAAA,EAAA,IAAA;AACA,KA9GA;AA+GA,IAAA,WA/GA,uBA+GA,GA/GA,EA+GA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,UAAA,EAAA,EAAA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,QAAA,EAAA,EAAA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,WAAA,EAAA,EAAA;AACA,WAAA,IAAA,CAAA,GAAA,EAAA,OAAA,EAAA,EAAA;AACA;AApHA,GAdA;AAoIA,EAAA,OApIA,qBAoIA;AACA,SAAA,QAAA,CAAA,IAAA;AACA,GAtIA;AAuIA,EAAA,OAvIA,qBAuIA;AACA,SAAA,cAAA;AACA;AAzIA,CAAA","sourcesContent":["<template>\n    <div>\n        <v-container grid-list-lg>\n            <v-layout row wrap>\n                <div v-if=\"dataLoadingError\" class=\"full-width\">\n                    <v-flex xs12>\n                        <v-card color=\"blue-grey darken-2\">\n                            <v-card-text  class=\"text\">\n                                <p>{{ dataLoadingError }}</p>\n                            </v-card-text>\n                            <v-card-actions class=\"buttons\">\n                                <div class=\"button-wrapper\"><v-btn @click=\"showData(true)\" flat color=\"orange\">Reload\n                                </v-btn></div>\n                            </v-card-actions>\n                        </v-card>\n                    </v-flex>\n                </div>\n                <div v-else class=\"full-width\">\n                    <v-flex xs-12 v-if=\"!showDataLoader\" class=\"button-wrapper\">\n                        <div><v-btn @click=\"validateAllDocs\" flat color=\"lime\">Validate all documents</v-btn></div>\n                    </v-flex>\n                    <v-flex xs12 v-for=\"(item, index) in dataItems\" v-bind:key=\"index\">\n                        <v-card color=\"blue-grey darken-2\">\n                            <v-card-title class=\"text\">\n                                <v-flex xs11>\n                                    <div class=\"headline\">{{ item.filename }}</div>\n                                </v-flex>\n                                <v-flex xs1 style=\"text-align: right;\">\n                                    <div v-if=\"item.valid === 'valid'\"><v-icon>far fa-check-circle</v-icon></div>\n                                    <div v-if=\"item.valid === 'notValid'\"><v-icon>far fa-times-circle</v-icon></div>\n                                    <div v-if=\"item.valid === 'validationInProgress'\"><v-icon>fas fa-circle-notch\n                                        fa-spin</v-icon></div>\n                                </v-flex>\n                            </v-card-title>\n                            <v-card-text  class=\"text\">\n                                <div>ID {{ item.id}}</div><br>\n                                <div>Checksum {{item.checksum}}</div>\n                                <div>Schema {{item.schema}}</div>\n                                <div>Signature {{item.signature}}</div>\n\n                                <v-alert :value=\"true\"\n                                         v-model=\"item.gotErrorFromResponse\"\n                                         dismissible\n                                         type=\"error\"\n                                >Validation failed, please revalidate\n                                </v-alert>\n                            </v-card-text>\n                            <v-card-actions class=\"buttons\">\n                                <div class=\"button-wrapper\"><v-btn @click=\"validateSingleDoc(item.id)\"\n                                                                   flat color=\"orange\">Validate</v-btn></div>\n                            </v-card-actions>\n                        </v-card>\n                    </v-flex>\n                    <v-flex style=\"text-align: center\" v-if=\"showDataLoader\">\n                        <div><v-icon>fas fa-circle-notch fa-spin</v-icon></div>\n                    </v-flex>\n                </div>\n            </v-layout>\n        </v-container>\n    </div>\n</template>\n\n<script>\n    import axios from 'axios'\n    export default {\n        data() {\n            return {\n                dataItems: [],\n                dataLoadingError: '',\n                dataCounter: 5,\n                perPage: 50,\n                page: 1,\n                url: 'http://fe-test.guardtime.com/documents',\n                alert: true,\n                showDataLoader: false,\n                startIndex: 0\n            }\n        },\n        methods: {\n            showData(state) {\n                this.showDataLoader = true\n                this.dataLoadingError = '';\n                // Reload button appears, if data not loaded after 3 sec.\n                // Speeds up testing, should be used in dev mode only.\n                setTimeout(this.error504Handling, 3000);\n\n                axios.get(this.url + '?perPage=' + this.perPage + '&page=' + this.page)\n                .then((res) => {\n                    this.showDataLoader = false\n                    this.dataItems = this.dataItems.concat(res.data.data);\n                })\n                .catch((error) => {\n                    if (state === true)  {\n                        this.showDataLoader = false\n                        this.showData(false)\n                        console.log(error.response.data.error.code)\n                    }\n                })\n            },\n            async validateSingleDoc(id) {\n                let modes = ['validateChecksum', 'validateSchema', 'validateSignature'],\n                    docObjectById = what => this.dataItems.find(element => element.id === what),\n                    docByID = docObjectById(id)\n\n                if(docByID) {\n                    this.initValues(docByID)\n                    this.resetValues(docByID)\n\n                    for(let i = 0; i < modes.length; i++) {\n                        this.$set(docByID, 'valid',  'validationInProgress');\n                        await axios.post(this.url + '/'+ id + '/' + modes[i])\n                            .then((res) => {\n                                if (!res.data.valid) {\n                                    this.$set(docByID, 'gotFalseFromResponse',  true);\n                                }\n                                if (modes[i] === 'validateChecksum') {\n                                    this.$set(docByID, 'checksum',  res.data.valid);\n                                }\n                                else if (modes[i] === 'validateSchema') {\n                                    this.$set(docByID, 'schema',  res.data.valid);\n                                }\n                                else {\n                                    this.$set(docByID, 'signature',  res.data.valid);\n                                }\n                            })\n                            .catch((error) => {\n                                this.$set(docByID, 'gotErrorFromResponse',  true);\n                                console.log(error.response.data.error.code)\n                            })\n                        if (docByID.gotFalseFromResponse) {\n                            this.$set(docByID, 'docValid',  false);\n                            break;\n                        }\n                        if(docByID.gotErrorFromResponse) {\n                            break;\n                        }\n                    }\n                    if (docByID.gotErrorFromResponse) {\n                        this.resetValues(docByID)\n                    }\n                    else {\n                        if (docByID.docValid) {\n                            this.$set(docByID, 'valid',  'valid');\n                        }\n                        else {\n                            this.$set(docByID, 'valid',  'notValid');\n                        }\n                    }\n                }\n            },\n            infiniteScroll() {\n                window.onscroll = () => {\n                    let bottomOfWindow = (window.innerHeight + Math.ceil(window.pageYOffset)) >=\n                        document.body.offsetHeight;\n\n                    if (bottomOfWindow) {\n                        this.page+=1;\n                        this.showData(true)\n                        this.dataCounter+=this.perPage;\n                    }\n                };\n            },\n            error504Handling() {\n                this.showDataLoader = false\n                if (this.dataItems.length < 1) {\n                    this.dataLoadingError = 'Service unavailable, please reload'\n                }\n            },\n            validateAllDocs() {\n                let that = this,\n                    perIteration = 5;\n\n                this.dataItems.slice(that.startIndex, that.startIndex + perIteration)\n                    .forEach(function(item) {\n                        that.validateSingleDoc(item.id);\n                });\n\n                that.startIndex += perIteration;\n                if (this.dataItems.length > that.startIndex) {\n                    setTimeout(this.validateAllDocs, 5500);\n                } else {\n                    that.startIndex = 0;\n                }\n            },\n            initValues(obj) {\n                this.$set(obj, 'gotFalseFromResponse',  false);\n                this.$set(obj, 'gotErrorFromResponse',  false);\n                this.$set(obj, 'docValid',  true);\n            },\n            resetValues(obj) {\n                this.$set(obj, 'checksum',  '');\n                this.$set(obj, 'schema',  '');\n                this.$set(obj, 'signature',  '');\n                this.$set(obj, 'valid',  '');\n            }\n    },\n    created() {\n        this.showData(true);\n    },\n    mounted() {\n        this.infiniteScroll();\n    }\n};\n</script>\n<style>\n    .full-width {\n        width: 100%;;\n    }\n    .text {\n        color: #ddd;\n    }\n    .button-wrapper {\n        text-align: right;\n        width: 100%;\n    }\n    .buttons {\n        background: #455A70;\n    }\n    .v-card__text {\n        flex-wrap: wrap;\n    }\n    .flex .fa-check-circle {\n        color: lime!important;\n    }\n    .flex .fa-times-circle  {\n        color: orangered !important;\n    }\n    .fa-circle-notch {\n        color: cyan!important;\n    }\n</style>\n"],"sourceRoot":"src/views"}]}