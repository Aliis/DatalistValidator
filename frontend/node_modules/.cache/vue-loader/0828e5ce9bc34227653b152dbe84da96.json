{"remainingRequest":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\src\\views\\Home.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\src\\views\\Home.vue","mtime":1554585366962},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\aliiski\\Desktop\\work\\RSSReader-master\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.text {\n    color: #ddd;\n}\n.button-wrapper {\n    text-align: right;\n    width: 100%;\n}\n.buttons {\n    background: #455A70;\n}\n.v-card__text {\n    flex-wrap: wrap;\n}\n.flex .fa-check-circle {\n    color: lime!important;\n}\n.flex .fa-times-circle  {\n    color: orangered !important;\n}\n.fa-circle-notch {\n    color: cyan!important;\n}\n",{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <v-container grid-list-lg>\n            <v-layout row wrap>\n                <v-flex xs-12 v-if=\"!feedLoadingError\" class=\"button-wrapper\">\n                    <div><v-btn @click=\"validateAllDocs\"\n                                                       flat color=\"lime\">Validate all documents</v-btn></div>\n                </v-flex>\n                <v-flex xs12 v-if=\"feedLoadingError\">\n                    <v-card color=\"blue-grey darken-2\">\n                        <v-card-text  class=\"text\">\n                            <p>{{ feedLoadingError }}</p>\n                        </v-card-text>\n                        <v-card-actions class=\"buttons\">\n                            <div class=\"button-wrapper\"><v-btn @click=\"getFeed\" flat color=\"orange\">Reload\n                            </v-btn></div>\n                        </v-card-actions>\n                    </v-card>\n                </v-flex>\n                <v-flex xs12 v-else  v-for=\"item in feedItems\">\n                    <v-card color=\"blue-grey darken-2\">\n                        <v-card-title class=\"text\">\n                            <v-flex xs11>\n                                <div class=\"headline\">{{ item.filename }}</div>\n                            </v-flex>\n                            <v-flex xs1 style=\"text-align: right;\">\n                                <div v-if=\"item.valid === 'valid'\"><v-icon>far fa-check-circle</v-icon></div>\n                                <div v-if=\"item.valid === 'notvalid'\"><v-icon>far fa-times-circle</v-icon></div>\n                                <div v-if=\"item.valid === 'loading'\"><v-icon>fas fa-circle-notch fa-spin</v-icon></div>\n                            </v-flex>\n                        </v-card-title>\n                        <v-card-text  class=\"text\">\n                            <div>ID {{ item.id}}</div>\n                            <div>Hash {{ item.hash }}</div><br>\n                            <div>Checksum {{item.checksum}}</div>\n                            <div>Schema {{item.schema}}</div>\n                            <div>Signature {{item.signature}}</div>\n\n                            <v-alert\n                                     :value=\"true\"\n                                     v-model=\"item.validationError\"\n                                     dismissible\n                                     type=\"error\"\n                            >Validation failed, please revalidate\n                            </v-alert>\n                        </v-card-text>\n                        <v-card-actions class=\"buttons\">\n                            <div class=\"button-wrapper\"><v-btn @click=\"validateSingleDoc(item.id)\"\n                                    flat color=\"orange\">Validate</v-btn></div>\n                        </v-card-actions>\n                    </v-card>\n                </v-flex>\n                <v-flex style=\"text-align: center\">\n                    <div v-if=\"showLoader\"><v-icon>fas fa-circle-notch fa-spin</v-icon></div>\n                </v-flex>\n            </v-layout>\n        </v-container>\n    </div>\n</template>\n\n<script>\n    import axios from 'axios'\n    export default {\n        data() {\n            return {\n                feedItems: [],\n                feedLoadingError: '',\n                feedCounter: 5,\n                page: 1,\n                url: 'http://fe-test.guardtime.com/documents',\n                alert: true,\n                id: '',\n                showLoader: false\n            }\n        },\n        methods: {\n            getFeed(state) {\n                this.feedLoadingError = '';\n                // error msg will appear, if feed not loaded after 3 sec\n                setTimeout(this.feedErrorHandling, 3000);\n                this.showLoader = true\n\n                axios.get(this.url + '?perPage=5&page=' + this.page)\n                .then((res) => {\n                    this.showLoader = false\n                    this.feedItems = this.feedItems.concat(res.data.data);\n                })\n                .catch((error) => {\n                    if (state === true)  {\n                        this.showLoader = false\n                        console.log(error.response.data.error.code)\n                        this.getFeed(false)\n                    }\n                })\n            },\n            async validateSingleDoc(id) {\n                console.log(\"Start:\" + id + \" ********************** \" + new Date());\n                this.id = id;\n                let modes = ['validateChecksum', 'validateSchema', 'validateSignature'];\n                let feedObjectById = what => this.feedItems.find(element => element.id === what);\n\n                if(feedObjectById(id)) {\n                    this.resetValidationValues(feedObjectById(id));\n                    this.$set(feedObjectById(id), 'gotFalseFromResponse',  false);\n                    this.$set(feedObjectById(id), 'docValid',  true);\n                    this.$set(feedObjectById(id), 'validationError',  false);\n\n                    for(let i = 0; i < modes.length; i++) {\n                        this.$set(feedObjectById(id), 'valid',  'loading');\n                        await axios.post(this.url + '/'+ id + '/' + modes[i])\n                            .then((res) => {\n                                if (!res.data.valid) {\n                                    this.$set(feedObjectById(id), 'gotFalseFromResponse',  true);\n                                }\n                                if (i === 'validateChecksum') {\n                                    this.$set(feedObjectById(id), 'checksum',  res.data.valid);\n                                }\n                                else if (i === 'validateSchema') {\n                                    this.$set(feedObjectById(id), 'schema',  res.data.valid);\n                                }\n                                else {\n                                    this.$set(feedObjectById(id), 'signature',  res.data.valid);\n                                }\n                            })\n                            .catch((error) => {\n                                console.log(error.response.data.error.code)\n                                this.$set(feedObjectById(id), 'validationError',  true);\n                            })\n                        if (feedObjectById(id).gotFalseFromResponse) {\n                            this.$set(feedObjectById(id), 'docValid',  false);\n                            break;\n                        }\n                        if(feedObjectById(id).validationError) {\n                            break;\n                        }\n                    }\n                    if (feedObjectById(id).docValid) {\n                        this.$set(feedObjectById(id), 'valid',  'valid');\n                    }\n                    else if (!feedObjectById(id).docValid) {\n                        this.$set(feedObjectById(id), 'valid',  'notvalid');\n                    }\n                    else {\n                        this.resetValidationValues(feedObjectById(id));\n                    }\n                }\n                console.log(\"End:\" + id + \" ********************** \" + new Date());\n            },\n            infiniteScroll() {\n                window.onscroll = () => {\n                    let bottomOfWindow = document.documentElement.scrollTop + window.innerHeight === document.documentElement.offsetHeight;\n\n                    if (bottomOfWindow) {\n                        this.page+=1;\n                        this.getFeed(true)\n                        this.feedCounter+=5;\n                    }\n                };\n            },\n            feedErrorHandling() {\n                this.showLoader = false\n                if (this.feedItems.length < 1) {\n                    this.feedLoadingError = 'Service unavailable.'\n                }\n            },\n            validateAllDocs() {\n                let that = this;\n                this.feedItems.forEach(function(item) {\n                    that.validateSingleDoc(item.id);\n                });\n            },\n            resetValidationValues(obj) {\n                this.$set(obj, 'checksum',  '');\n                this.$set(obj, 'schema',  '');\n                this.$set(obj, 'signature',  '');\n                this.$set(obj, 'valid',  '');\n            }\n    },\n    created() {\n        this.getFeed(true);\n    },\n    mounted() {\n        this.infiniteScroll();\n    }\n};\n</script>\n<style>\n    .text {\n        color: #ddd;\n    }\n    .button-wrapper {\n        text-align: right;\n        width: 100%;\n    }\n    .buttons {\n        background: #455A70;\n    }\n    .v-card__text {\n        flex-wrap: wrap;\n    }\n    .flex .fa-check-circle {\n        color: lime!important;\n    }\n    .flex .fa-times-circle  {\n        color: orangered !important;\n    }\n    .fa-circle-notch {\n        color: cyan!important;\n    }\n</style>\n"]}]}